#include "RooFit.h"

#include "Riostream.h"
#include "Riostream.h"
#include <cmath>
#include <limits>

#include "../interface/RooPowLogPdf.h"
#include "diphotons/Utils/interface/Faddeeva.h"

#include "RooRealVar.h"

#include "TMath.h"

ClassImp(RooPowLogPdf)

using namespace std;
using namespace Faddeeva;


#define pi_value TMath::Pi()

//_____________________________________________________________________________
RooPowLogPdf::RooPowLogPdf(const char *name, const char *title, RooAbsReal& _x, RooAbsReal& _c, RooAbsReal& _d) :
	RooAbsPdf(name, title), 
	analyticIntegral_(true), 
	x_("x","Dependent",this,_x), c_("c","Lin",this,_c), d_("d","Log",this,_d)
{
}


//_____________________________________________________________________________
RooPowLogPdf::RooPowLogPdf(const RooPowLogPdf& other, const char* name) :
	RooAbsPdf(other, name), 
	analyticIntegral_(other.analyticIntegral_), 
	x_("x",this,other.x_), c_("c",this,other.c_), d_("d",this,other.d_)
{
}

//_____________________________________________________________________________
Int_t RooPowLogPdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const 
{
	//// cout << "analyticIntegral_ " << analyticIntegral_ << endl;
	if( analyticIntegral_ && matchArgs(allVars,analVars,x_)) return 1 ;
	return 0 ;
}


//_____________________________________________________________________________
Double_t logDeltaErf(Double_t x1, Double_t x2)
{
	//// Double_t p = .3257911;
	//// Double_t coeffs[] = {  .254829592, -.284496736, 1.421413741, -1.453152027, 1.061405429	};
	//// size_t ncoeffs = sizeof(coeffs)/sizeof(Double_t);
	//// Double_t t1 = 1./(1.+p*x1);
	//// Double_t t2 = 1./(1.+p*x2);
	//// 
	//// // erf = 1 - (a_1*t^1 + ... + a_n*t^n)*exp(-x^2) + o(10^-7)
	//// // erf(x2) - erf(x1) = -exp(-x2^2)*pol(t2) + exp(-x1^2)*pol(t1)
	//// //                   = exp(-x1^2)*( pol(t1) - exp(x1^2-x2*^2)*pol(t2) )
	//// 
	//// Double_t p1=0.,p2=0.;
	//// for(int ic=ncoeffs-1; ic>=0; --ic) {
	//// 	p1 += coeffs[ic];
	//// 	p1 *= t1;
	//// 	p2 += coeffs[ic];
	//// 	p2 *= t2;
	//// }
	//// 
	Double_t p1 = erfcx(x1);
	Double_t p2 = erfcx(x2);
	Double_t deltaXsq = x1*x1 - x2*x2;
	Double_t ret = -x1*x1 + log( p1 - exp(deltaXsq)*p2 );
	/// Double_t ret = -x2*x2 + log( exp(-deltaXsq)*p1 - p2 );
	
	//// cout << "logDeltaErf " << " x1=" << x1 << " x2=" << x2 << " t1=" << t1 << " t2=" << t2
	////      << " p1=" << p1 << " p2=" << p2 << " deltaXsq=" << deltaXsq << " ret=" << ret << endl;
	return ret;
}

//_____________________________________________________________________________
Double_t logDeltaErfi(Double_t x1, Double_t x2)
{
	Double_t p1 = -w_im(x1);
	Double_t p2 = -w_im(x2);
	Double_t deltaXsq = x1*x1 - x2*x2;

	Double_t ret = x2*x2 + log( exp(deltaXsq)*p1 - p2);

	//// cout << "logDeltaErf " << " x1=" << x1 << " x2=" << x2 
	////      << " p1=" << p1 << " p2=" << p2 << " deltaXsq=" << deltaXsq << " ret=" << ret << endl;
	return ret;
}

//_____________________________________________________________________________
Double_t RooPowLogPdf::analyticalIntegral(Int_t code, const char* rangeName) const 
{
	const Double_t half_sqrt_pi = 0.5*sqrt(pi_value);
	switch(code) {
	case 1: 
	{
		Double_t ret(0) ;
		Double_t x1 = x_.min(rangeName);
		Double_t x2 = x_.max(rangeName);		
		const Double_t eps = 1.e-300;
		if( d_ == 0. ) {
			if( c_ == 0. ) { 
				ret = x2-x1;
			} else if( c_ == -1. ) {
				ret = log(x2) - log(x1);
			} else {
				ret = ( pow(x2,c_+1.) - pow(x1,c_+1.) ) / (c_+1.);
			}			
		} else { 
			/// integrate( exp(c_*log(x) + d_*log(x)^2 ), x ) = 
			/// 	( sqrt(%pi) * %e^(-(-c_-1)^2/(4*d_)) * erf(sqrt(-d_)*log(x)-(c_+1)/(2*sqrt(-d_)))) / (2*sqrt(-d_))
			/// -i erf( i x ) = erfi( x )
			Double_t sqrt_d = sqrt(fabs(d_));
			Double_t delta  = 0.5*(c_+1.)/sqrt_d;
			Double_t log1   = sqrt_d*log(x1);
			Double_t log2   = sqrt_d*log(x2);
			// Double_t pre    = half_sqrt_pi*exp( -0.25*(c_-1.)*(c_-1.) / d_ ) / sqrt_d;
			Double_t pre    = -0.25*(c_+1.)*(c_+1.) / d_;
			Double_t logDerf = 0.; 
			
			if( d_ < 0. ) {
				logDerf = logDeltaErf(log1-delta,log2-delta);
			} else {
				logDerf = logDeltaErfi(log1+delta,log2+delta);
			}
			ret = half_sqrt_pi * exp( pre + logDerf )/ sqrt_d;
			/// cout << "sqrt_d="  << sqrt_d << " delta=" << delta << " log1=" << log1 << " log2=" << log2 << 
			///	" logDerf=" << logDerf  << " pre=" << pre << endl;
			
		}
		
		//// cout << "Int_RooPowLogPdf_dx(c_=" << c_ << " d_= " << d_ <<  ", x1=" << x1 << ", x2=" << x2 << ")=" << ret << endl ;
		return max(ret,eps);
	}
	}
  
	assert(0) ;
	return 0 ;
}


//_____________________________________________________________________________
Double_t RooPowLogPdf::evaluate() const{
	Double_t logx = std::log((Double_t)x_);
	logVal_ = ((Double_t)c_ + ((Double_t)d_)*logx);
	val_  = pow(x_,logVal_);
	logVal_ *= logx;
	return val_;
}
